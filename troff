#!/usr/bin/python3

import fileinput
import optparse
import os
import os.path
import sys
import xml.sax.saxutils

import tenorsax.generators
import tenorsax.sources.troff.parse
import tenorsax.filters.xslt

try:
    from lxml.etree import XSLTApplyError
except:
    XSLTApplyError = None

def print_error(msg, device, exception):
    print("E: {0} for output device '{1}' gave error: {2}".format(msg, device,
        exception), file=sys.stderr)

dirs = {
    "tmac": ("/usr/local/share/tenorsax/tmac", "/usr/share/tenorsax/tmac",
        "/usr/local/share/tmac", "/usr/share/tmac",
        "/usr/share/groff/current/tmac", "~/share/tmac", "~/tmac", "./tmac"),
    "xslt": ("/usr/local/share/tenorsax/xslt", "/usr/share/tenorsax/xslt",
        "~/share/xslt", "~/xslt", "./xslt")
}

suffixes = {"tmac": (".tmac",), "xslt": (".xsl",)}

def find_first(type_, name):
    try:
        lst = dirs[type_]
    except KeyError:
        return None
    try:
        suff = list(suffixes[type_])
        suff.append("")
    except KeyError:
        return None
    for j in suff:
        for i in lst:
            possible = os.path.expanduser(i + "/" + name + j)
            if os.path.exists(possible):
                return possible
    return None

def main():
    parser = optparse.OptionParser()
    parser.add_option("-T", dest="fmt", default="troff-xml")
    parser.add_option("-s", dest="stylesheet")
    parser.add_option("-o", dest="output")
    parser.add_option("-m", dest="macros", action="append")
    (options, args) = parser.parse_args()

    output = sys.stdout
    if options.output is not None:
        output = open(options.output, "w", encoding="UTF-8")

    if options.fmt == "sax":
        writer = tenorsax.generators.SAXGenerator(output)
    else:
        writer = xml.sax.saxutils.XMLGenerator(output, "UTF-8", True)
    if options.stylesheet:
        f = tenorsax.filters.xslt.XSLTTransformer(writer, options.stylesheet)
    elif options.fmt == "test":
        f = tenorsax.filters.xslt.TextXSLTTransformer(output, "xslt/trim.xsl")
    elif options.fmt == "sax":
        f = writer
    else:
        ssheet = find_first("xslt", "format-" + options.fmt)
        if ssheet is not None:
            f = tenorsax.filters.xslt.XSLTTransformer(writer, ssheet)
        else:
            f = writer
    p = tenorsax.sources.troff.parse.Parser(f)
    
    filelist = []
    for i in options.macros or []:
        val = find_first("tmac", i)
        if val is not None:
            filelist.append(val)
    filelist.extend(args or ["/dev/stdin"])
    init = find_first("tmac", "init")
    if init is not None:
        filelist[0:0] = [init]
    try:
        p.parse(fileinput.input(files=filelist,
            openhook=fileinput.hook_encoded("UTF-8")))
    except XSLTApplyError as e:
        print_error("transforming XML", options.fmt, e)
    output.flush()

if __name__ == '__main__':
    if "TENORSAX_PROFILE" in os.environ:
        import cProfile
        cProfile.run("main()", os.environ["TENORSAX_PROFILE"])
    else:
        main()
